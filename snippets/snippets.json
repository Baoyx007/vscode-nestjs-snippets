{
  "nestjs-controller": {
    "prefix": "nsjs-con",
    "description": "NestJS Controller",
    "body": [
      "import { Controller, Get } from '@nestjs/common';",
      "",
      "@Controller(${1})",
      "export class ${2}Controller {",
      "\tconstructor(){}",
      "",
      "\t@Get() {",
      "\t\t${0}",
      "\t}",
      "}"
    ]
  },
  "nestjs-middleware-v4": {
    "prefix": "nsjs-mid-v4",
    "description": "NestJS Middleware Version 4",
    "body": [
      "import { Middleware, NestMiddleware, ExpressMiddleware } from '@nestjs/common';",
      "",
      "@Middleware()",
      "export class ${1}Middleware implements NestMiddleware {",
      "\tresolve(...args: any[]): ExpressMiddleware {",
      "\t\treturn (req, res, next) => {",
      "\t\t\t${0}",
      "\t\t\tnext();",
      "\t\t};",
      "\t}",
      "}"
    ]
  },
  "nestjs-module-v4": {
    "prefix": "nsjs-mod-v4",
    "description": "NestJS Module v4",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { ${1}Controller } from './${2}.controller';",
      "import { ${1}Service } from './${2}.service';",
      "",
      "@Module({",
      "\tcontrollers: [${1}Controller],",
      "\tcomponents:[${1}Service],",
      "})",
      "export class ${1}Module {${0}};"
    ]
  },
  "nestjs-module-root": {
    "prefix": "nsjs-mod-root",
    "description": "NestJS Root Module",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { ${1}Module } from './${2}.module';",
      "",
      "@Module({",
      "\tmodules: [${1}Module],",
      "})",
      "export class ${3:Application}Module {${0}};"
    ]
  },
  "nestjs-module-nest": {
    "prefix": "nsjs-mod-nest",
    "description": "NestJS Module Implementing NestModule",
    "body": [
      "import { Module, NestModule } from '@nestjs/common';",
      "import { ${1}Module } from './${2}.module';",
      "",
      "@Module({",
      "\tmodules: [${1}Module],",
      "})",
      "export class ${3:Application}Module {",
      "\tconfigure() {",
      "\t\t${0}",
      "\t}",
      "}"
    ]
  },
  "nestjs-mongoose-service": {
    "prefix": "nsjs-ser-mon",
    "description": "NestJS Service for Mongoose",
    "body": [
      "import { Model } from 'mongoose';",
      "import { Component, Inject } from '@nestjs/common';",
      "import { InjectModel } from '@nestjs/mongoose';",
      "",
      "import { Create${1:User}Dto } from './dto/create-${2:user}.dto';",
      "import { ${1:User} } from './interfaces/${2:user}s.interface';",
      "import { ${1:User}Schema } from './schemas/${2:user}s.schema';",
      "",
      "@Component()",
      "export class UsersService {",
      "\tconstructor(@InjectModel(${1:User}Schema) private readonly ${2:user}Model: Model<${1:User}>) {}",
      "\tasync findAll () {",
      "\t\treturn await this.${2:user}Model.find().exec()",
      "\t}",
      "}"
    ]
  },
  "nestjs-mongoose-interface": {
    "prefix": "nsjs-mon-int",
    "description": "NestJS Interface for mongoose",
    "body": [
      "import { Document } from 'mongoose';",
      "",
      "export interface ${1:User} extends Document {",
      "\treadonly ${2:name}: string;",
      "}"
    ]
  },
  "nestjs-unit-test": {
    "prefix": "nsjs-unit-test",
    "description": "NestJS Unit Test",
    "body": [
      "import { Test } from '@nestjs/testing';",
      "import { ${1}Controller } from './${2}.controller';",
      "import { ${1}Service } from './${2}.service';",
      "",
      "describe('${1}Controller', () => {",
      "\tlet ${2}Controller: ${1}Controller;",
      "\tlet ${2}Service: ${1}Service;",
      "",
      "\tbeforeEach(async () => {",
      "\t\tconst module = await Test.createTestingModule({",
      "\t\t\tcontrollers: [${1}Controller],",
      "\t\t\tcomponents: [${1}Service],",
      "\t\t}).compile();",
      "",
      "\t\t${2}Service = module.get<${1}Service>(${1}Service);",
      "\t\t${2}Controller = module.get<${1}Controller>(${1}Controller);",
      "\t});",
      "",
      "\tdescribe('findAll', () => {",
      "\t\tit('should return an array of users', async () => {",
      "\t\t\tconst result = ['test'];",
      "\t\t\tjest.spyOn(${2}Service, 'findAll').mockImplementation(() => result);",
      "\t\t\t${0}",
      "\t\t\texpect(await ${2}Controller.findAll()).toBe(result);",
      "\t\t});",
      "\t});",
      "});"
    ]
  },
  "nestjs-seq-entity": {
    "prefix": "nsjs-seq-ent",
    "description": "NestJS Sequelize Entity",
    "body": [
      "import { Table, Column, Model } from 'sequelize-typescript';",
      "",
      "@Table",
      "export class ${1} extends Model<${1}> {",
      "\t@Column",
      "\tname: string;",
      "",
      "\t@Column",
      "\t${0};",
      "}"
    ]
  },
  "nestjs-seq-provider": {
    "prefix": "nsjs-seq-pro",
    "description": "NestJS Sequelize Provider",
    "body": [
      "import { ${1} } from './${2}.entity';",
      "",
      "export const ${2}Providers = [",
      "\t{",
      "\t\tprovide: '${1}Repository',",
      "\t\tuseValue: ${1},",
      "\t},",
      "];"
    ]
  },
  "nestjs-seq-db-provider": {
    "prefix": "nsjs-seq-db-pro",
    "description": "NestJS Sequelize Provider",
    "body": [
      "import { Sequelize } from 'sequelize-typescript';",
      "import { ${1} } from '../${2}s/${2}.entity';",
      "",
      "export const databaseProviders = [",
      "\t{",
      "\t\tprovide: 'SequelizeToken',",
      "\t\tuseFactory: async () => {",
      "\t\t\tconst sequelize = new Sequelize({",
      "\t\t\t\tdialect: '${3:mysql}',",
      "\t\t\t\thost: '${4:localhost}',",
      "\t\t\t\tport: ${5:3306},",
      "\t\t\t\tusername: '${6:root}',",
      "\t\t\t\tpassword: '${7}',",
      "\t\t\t\tdatabase: '${0}',",
      "\t\t\t});",
      "\t\t\tsequelize.addModels([${1}]);",
      "\t\t\tawait sequelize.sync();",
      "\t\t\treturn sequelize;",
      "\t\t},",
      "\t},",
      "];"
    ]
  },
  "nestjs-interceptor": {
    "prefix": "nsjs-int",
    "description": "NestJS Interceptor",
    "body": [
      "import { Interceptor, NestInterceptor, ExecutionContext } from '@nestjs/common';",
      "import { Observable } from 'rxjs/Observable';",
      "",
      "@Interceptor()",
      "export class ${1}Interceptor implements NestInterceptor {",
      "\tintercept(dataOrRequest, context: ExecutionContext, stream$: Observable<any>): Observable<any> {",
      "\t\t${0}",
      "\t}",
      "}"
    ]
  },
  "nestjs-guard": {
    "prefix": "nsjs-guard",
    "description": "NestJS Guard",
    "body": [
      "import { Guard, CanActivate, ExecutionContext } from '@nestjs/common';",
      "import { Observable } from 'rxjs/Observable';",
      "import { Reflector } from '@nestjs/core';",
      "",
      "@Guard()",
      "export class ${1}Guard implements CanActivate {",
      "\tconstructor(private readonly reflector: Reflector) {}",
      "",
      "\tcanActivate(req, context: ExecutionContext):  boolean | Promise<boolean> | Observable<boolean> {",
      "\t\t${0}",
      "\t}",
      "}"
    ]
  },
  "nestjs-provider": {
    "prefix": "nsjs-pro",
    "description": "NestJS Provider",
    "body": [
      "import { Injectable } from '@nestjs/common';",
      "",
      "@Injectable()",
      "export class ${1}Service {",
      "\tconstructor() {}",
      "\t${0}",
      "}"
    ]
  },
  "nestjs-module": {
    "prefix": "nsjs-mod",
    "description": "NestJS Module",
    "body": [
      "import { Module } from '@nestjs/common';",
      "import { ${1}Controller } from './${2}.controller';",
      "",
      "@Module({",
      "\tcontrollers: [${1}Controller],",
      "\tproviders: [],",
      "})",
      "export class ${1}Module {${0}};"
    ]
  },
  "nestjs-module-global": {
    "prefix": "nsjs-mod-glob",
    "description": "NestJS Global Module",
    "body": [
      "import { Module, Global } from '@nestjs/common';",
      "import { ${1}Controller } from './${2}.controller';",
      "",
      "@Global()",
      "@Module({",
      "\tcontrollers: [${1}Controller],",
      "\tproviders: [],",
      "})",
      "export class ${1}Module {${0}};"
    ]
  },
  "nestjs-middleware": {
    "prefix": "nsjs-mid",
    "description": "NestJS Middleware",
    "body": [
      "import { Middleware, NestMiddleware, MiddlewareFunction } from '@nestjs/common';",
      "",
      "@Middleware()",
      "export class ${1}Middleware implements NestMiddleware {",
      "\tresolve(...args: any[]): MiddlewareFunction {",
      "\t\treturn (req, res, next) => {",
      "\t\t\t${0}",
      "\t\t\tnext();",
      "\t\t};",
      "\t}",
      "}"
    ]
  }
}